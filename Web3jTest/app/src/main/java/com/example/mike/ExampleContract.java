package com.example.mike;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.utils.Async;

import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.1.
 */
public final class ExampleContract extends Contract {
    private static final String BINARY = "606060405260006009555b620000286200002f6401000000000262000773176401000000009004565b5b62001368565b3073ffffffffffffffffffffffffffffffffffffffff16316200009b6040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250620005b86401000000000262000f3c176401000000009004565b11156200015c577f46cb989ef9cef13e930e3b7f286225a086e716a90d63e0b7da85d310a9db0c9a60405180806020018281038252604b8152602001807f4f7261636c697a6520717565727920776173204e4f542073656e742c20706c6581526020017f6173652061646420736f6d652045544820746f20636f76657220666f7220746881526020017f652071756572792066656500000000000000000000000000000000000000000081525060600191505060405180910390a1620005b5565b7f46cb989ef9cef13e930e3b7f286225a086e716a90d63e0b7da85d310a9db0c9a6040518080602001828103825260358152602001807f4f7261636c697a65207175657279207761732073656e742c207374616e64696e81526020017f6720627920666f722074686520616e737765722e2e000000000000000000000081525060400191505060405180910390a160006009541415620002dd57620002cd6040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280606081526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e726573756c742e676f616c73417761795465616d8152506200087964010000000002620011c8176401000000009004565b600a8160001916905550620005b4565b60016009541415620003d057620003c06040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280606081526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e726573756c742e676f616c73486f6d655465616d8152506200087964010000000002620011c8176401000000009004565b600a8160001916905550620005b3565b60026009541415620004c357620004b36040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280605881526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e686f6d655465616d4e616d6500000000000000008152506200087964010000000002620011c8176401000000009004565b600a8160001916905550620005b2565b60036009541415620005b157620005a66040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280605881526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e617761795465616d4e616d6500000000000000008152506200087964010000000002620011c8176401000000009004565b600a81600019169055505b5b5b5b5b5b565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806200063f575060006200063d6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000cff640100000000026200160f176401000000009004565b145b15620006675762000665600062000d0b640100000000026200161b176401000000009004565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620006f557600080fd5b6102c65a03f115156200070757600080fd5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889836000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620008075780820151818401525b602081019050620007e9565b50505050905090810190601f168015620008355780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156200085457600080fd5b6102c65a03f115156200086657600080fd5b5050506040518051905090505b5b919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806200090257506000620009006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000cff640100000000026200160f176401000000009004565b145b156200092a5762000928600062000d0b640100000000026200161b176401000000009004565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515620009b857600080fd5b6102c65a03f11515620009ca57600080fd5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000aca5780820151818401525b60208101905062000aac565b50505050905090810190601f16801562000af85780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151562000b1757600080fd5b6102c65a03f1151562000b2957600080fd5b50505060405180519050905062030d403a02670de0b6b3a76400000181111562000b5a576000600102915062000cf7565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101562000c1e5780820151818401525b60208101905062000c00565b50505050905090810190601f16801562000c4c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101562000c885780820151818401525b60208101905062000c6a565b50505050905090810190601f16801562000cb65780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151562000cd757600080fd5b6125ee5a03f1151562000ce957600080fd5b505050506040518051905091505b5b5092915050565b6000813b90505b919050565b60008062000d41731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed62000cff640100000000026200160f176401000000009004565b111562000dfa57731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000df06040805190810160405280600b81526020017f6574685f6d61696e6e65740000000000000000000000000000000000000000008152506200129c6401000000000262001aac176401000000009004565b6001905062001297565b600062000e2f73c03a2615d5efaf5f49f60b7bb6583eaec212fdf162000cff640100000000026200160f176401000000009004565b111562000ee85773c03a2615d5efaf5f49f60b7bb6583eaec212fdf16000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000ede6040805190810160405280600c81526020017f6574685f726f707374656e3300000000000000000000000000000000000000008152506200129c6401000000000262001aac176401000000009004565b6001905062001297565b600062000f1d73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e62000cff640100000000026200160f176401000000009004565b111562000fd65773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000fcc6040805190810160405280600981526020017f6574685f6b6f76616e00000000000000000000000000000000000000000000008152506200129c6401000000000262001aac176401000000009004565b6001905062001297565b60006200100b73146500cfd35b22e4a392fe0adc06de1a1368ed4862000cff640100000000026200160f176401000000009004565b1115620010c45773146500cfd35b22e4a392fe0adc06de1a1368ed486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620010ba6040805190810160405280600b81526020017f6574685f72696e6b6562790000000000000000000000000000000000000000008152506200129c6401000000000262001aac176401000000009004565b6001905062001297565b6000620010f9736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47562000cff640100000000026200160f176401000000009004565b11156200115e57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062001297565b6000620011937320e12a1f859b3feae5fb2a0a32c18f5a65555bbf62000cff640100000000026200160f176401000000009004565b1115620011f8577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062001297565b60006200122d7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa62000cff640100000000026200160f176401000000009004565b111562001292577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905062001297565b600090505b919050565b8060029080519060200190620012b4929190620012b9565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620012fc57805160ff19168380011785556200132d565b828001600101855582156200132d579182015b828111156200132c5782518255916020019190600101906200130f565b5b5090506200133c919062001340565b5090565b6200136591905b808211156200136157600081600090555060010162001347565b5090565b90565b611b9880620013786000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461008657806338bbfa50146100f0578063803bb6d01461019d5780639611a13c1461022c57806399d47303146102bb578063a2e620451461034a578063f32ca6db14610354575b600080fd5b341561009157600080fd5b6100ee60048080356000191690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103e3565b005b34156100fb57600080fd5b61019b60048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610593565b005b34156101a857600080fd5b6101b0610599565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f15780820151818401525b6020810190506101d5565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023757600080fd5b61023f610637565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102805780820151818401525b602081019050610264565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102c657600080fd5b6102ce6106d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030f5780820151818401525b6020810190506102f3565b50505050905090810190601f16801561033c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610352610773565b005b341561035f57600080fd5b610367610c85565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a85780820151818401525b60208101905061038c565b50505050905090810190601f1680156103d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103eb610d23565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561042457600080fd5b600a5460001916826000191614151561043c57600080fd5b6000600954141561046357806005908051906020019061045d929190611ac7565b506104d7565b6001600954141561048a578060069080519060200190610484929190611ac7565b506104d6565b600260095414156104b15780600890805190602001906104ab929190611ac7565b506104d5565b600360095414156104d45780600790805190602001906104d2929190611ac7565b505b5b5b5b6009600081548092919060010191905055506104f1610773565b7f72d22a826197cbbe19dad37cf92f46b0bc2208d13d495621f52109437a91018d816040518080602001828103825283818151815260200191508051906020019080838360005b838110156105545780820151818401525b602081019050610538565b50505050905090810190601f1680156105815780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b5050565b5b505050565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106cd5780601f106106a2576101008083540402835291602001916106cd565b820191906000526020600020905b8154815290600101906020018083116106b057829003601f168201915b505050505081565b60078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076b5780601f106107405761010080835404028352916020019161076b565b820191906000526020600020905b81548152906001019060200180831161074e57829003601f168201915b505050505081565b3073ffffffffffffffffffffffffffffffffffffffff16316107c96040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250610f3c565b1115610888577f46cb989ef9cef13e930e3b7f286225a086e716a90d63e0b7da85d310a9db0c9a60405180806020018281038252604b8152602001807f4f7261636c697a6520717565727920776173204e4f542073656e742c20706c6581526020017f6173652061646420736f6d652045544820746f20636f76657220666f7220746881526020017f652071756572792066656500000000000000000000000000000000000000000081525060600191505060405180910390a1610c82565b7f46cb989ef9cef13e930e3b7f286225a086e716a90d63e0b7da85d310a9db0c9a6040518080602001828103825260358152602001807f4f7261636c697a65207175657279207761732073656e742c207374616e64696e81526020017f6720627920666f722074686520616e737765722e2e000000000000000000000081525060400191505060405180910390a1600060095414156109f1576109e26040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280606081526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e726573756c742e676f616c73417761795465616d8152506111c8565b600a8160001916905550610c81565b60016009541415610acc57610abd6040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280606081526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e726573756c742e676f616c73486f6d655465616d8152506111c8565b600a8160001916905550610c80565b60026009541415610ba757610b986040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280605881526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e686f6d655465616d4e616d6500000000000000008152506111c8565b600a8160001916905550610c7f565b60036009541415610c7e57610c736040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250608060405190810160405280605881526020017f6a736f6e28687474703a2f2f6170692e666f6f7462616c6c2d646174612e6f7281526020017f672f76312f636f6d7065746974696f6e732f3434352f6669787475726573292e81526020017f66697874757265735b305d2e617761795465616d4e616d6500000000000000008152506111c8565b600a81600019169055505b5b5b5b5b5b565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d1b5780601f10610cf057610100808354040283529160200191610d1b565b820191906000526020600020905b815481529060010190602001808311610cfe57829003601f168201915b505050505081565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610d9357506000610d916000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661160f565b145b15610da457610da2600061161b565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610e3157600080fd5b6102c65a03f11515610e4257600080fd5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610f1a57600080fd5b6102c65a03f11515610f2b57600080fd5b5050506040518051905090505b5b90565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fac57506000610faa6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661160f565b145b15610fbd57610fbb600061161b565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561104a57600080fd5b6102c65a03f1151561105b57600080fd5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889836000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111595780820151818401525b60208101905061113d565b50505050905090810190601f1680156111865780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156111a457600080fd5b6102c65a03f115156111b557600080fd5b5050506040518051905090505b5b919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061123a575060006112386000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661160f565b145b1561124b57611249600061161b565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156112d857600080fd5b6102c65a03f115156112e957600080fd5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e75780820151818401525b6020810190506113cb565b50505050905090810190601f1680156114145780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561143257600080fd5b6102c65a03f1151561144357600080fd5b50505060405180519050905062030d403a02670de0b6b3a7640000018111156114725760006001029150611607565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156115345780820151818401525b602081019050611518565b50505050905090810190601f1680156115615780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561159b5780820151818401525b60208101905061157f565b50505050905090810190601f1680156115c85780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b15156115e857600080fd5b6125ee5a03f115156115f957600080fd5b505050506040518051905091505b5b5092915050565b6000813b90505b919050565b60008061163b731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed61160f565b11156116dc57731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506116d36040805190810160405280600b81526020017f6574685f6d61696e6e6574000000000000000000000000000000000000000000815250611aac565b60019050611aa7565b60006116fb73c03a2615d5efaf5f49f60b7bb6583eaec212fdf161160f565b111561179c5773c03a2615d5efaf5f49f60b7bb6583eaec212fdf16000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506117936040805190810160405280600c81526020017f6574685f726f707374656e330000000000000000000000000000000000000000815250611aac565b60019050611aa7565b60006117bb73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e61160f565b111561185c5773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506118536040805190810160405280600981526020017f6574685f6b6f76616e0000000000000000000000000000000000000000000000815250611aac565b60019050611aa7565b600061187b73146500cfd35b22e4a392fe0adc06de1a1368ed4861160f565b111561191c5773146500cfd35b22e4a392fe0adc06de1a1368ed486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119136040805190810160405280600b81526020017f6574685f72696e6b656279000000000000000000000000000000000000000000815250611aac565b60019050611aa7565b600061193b736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47561160f565b111561199e57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050611aa7565b60006119bd7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf61160f565b1115611a20577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050611aa7565b6000611a3f7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa61160f565b1115611aa2577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050611aa7565b600090505b919050565b8060029080519060200190611ac2929190611ac7565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b0857805160ff1916838001178555611b36565b82800160010185558215611b36579182015b82811115611b35578251825591602001919060010190611b1a565b5b509050611b439190611b47565b5090565b611b6991905b80821115611b65576000816000905550600101611b4d565b5090565b905600a165627a7a7230582068942b049b6874cb590ded93a8e44e7f88a077364eb402292fb6a18e89ebf8500029";

    private ExampleContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ExampleContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<UpdatedEventResponse> getUpdatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("updated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdatedEventResponse> responses = new ArrayList<UpdatedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdatedEventResponse typedResponse = new UpdatedEventResponse();
            typedResponse.matches = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdatedEventResponse> updatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("updated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdatedEventResponse>() {
            @Override
            public UpdatedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdatedEventResponse typedResponse = new UpdatedEventResponse();
                typedResponse.matches = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<NewOraclizeQueryEventResponse> getNewOraclizeQueryEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("newOraclizeQuery", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NewOraclizeQueryEventResponse> responses = new ArrayList<NewOraclizeQueryEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NewOraclizeQueryEventResponse typedResponse = new NewOraclizeQueryEventResponse();
            typedResponse.description = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewOraclizeQueryEventResponse> newOraclizeQueryEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("newOraclizeQuery", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewOraclizeQueryEventResponse>() {
            @Override
            public NewOraclizeQueryEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NewOraclizeQueryEventResponse typedResponse = new NewOraclizeQueryEventResponse();
                typedResponse.description = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<TransactionReceipt> __callback(Bytes32 myid, Utf8String result) {
        Function function = new Function("__callback", Arrays.<Type>asList(myid, result), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> __callback(Bytes32 myid, Utf8String result, DynamicBytes proof) {
        Function function = new Function("__callback", Arrays.<Type>asList(myid, result, proof), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> nameHomeTeam() {
        Function function = new Function("nameHomeTeam", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> goalsAwayTeam() {
        Function function = new Function("goalsAwayTeam", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> nameAwayTeam() {
        Function function = new Function("nameAwayTeam", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> update(final BigInteger weiValue) {
        final Function function = new Function("update", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return Async.run(new Callable<TransactionReceipt>() {
            @Override
            public TransactionReceipt call() throws Exception {
                return executeTransaction(FunctionEncoder.encode(function), weiValue);
            }
        });
    }

    public Future<Utf8String> goalsHomeTeam() {
        Function function = new Function("goalsHomeTeam", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<ExampleContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ExampleContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<ExampleContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ExampleContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static ExampleContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ExampleContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ExampleContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ExampleContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class UpdatedEventResponse {
        public Utf8String matches;
    }

    public static class NewOraclizeQueryEventResponse {
        public Utf8String description;
    }
}
